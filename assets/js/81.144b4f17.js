(window.webpackJsonp=window.webpackJsonp||[]).push([[81],{375:function(e,t,a){"use strict";a.r(t);var l=a(14),i=Object(l.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"types-of-values"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#types-of-values"}},[e._v("#")]),e._v(" Types of values")]),e._v(" "),t("p",[e._v("Values in HyperFormula can refer to Numbers, Text, Logical, Date, Time,\nDateTime, Error, or Duration data. The type of the value depends on the data to\nwhich it's referring. Functions may work differently based on the types of\nvalues.")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",{staticStyle:{"text-align":"left"}},[e._v("Type of value")]),e._v(" "),t("th",{staticStyle:{"text-align":"left"}},[e._v("Description")])])]),e._v(" "),t("tbody",[t("tr",[t("td",{staticStyle:{"text-align":"left"}},[e._v("Number")]),e._v(" "),t("td",{staticStyle:{"text-align":"left"}},[e._v("A numeric value such as 0, 2, -40, 0.1, and also scientific notation e.g. 5.6E+01; with a period as a default decimal separator.")])]),e._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[e._v("Text (string)")]),e._v(" "),t("td",{staticStyle:{"text-align":"left"}},[e._v('A text value, like "ABC", "apollo".')])]),e._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[e._v("Logical (Distinct Boolean)")]),e._v(" "),t("td",{staticStyle:{"text-align":"left"}},[e._v("A logical value might be one of two values: TRUE or FALSE. Please note that even if there is type coercion this will be recognized as TRUE/FALSE when comparing to numbers. It will not be recognized as 1 or 0.")])]),e._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[e._v("Date")]),e._v(" "),t("td",{staticStyle:{"text-align":"left"}},[e._v("A Gregorian calendar date in DD/MM/YYYY (default format), like 22/06/2022. All dates from 30/12/1899 to 31/12/9999 are supported.")])]),e._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[e._v("Time")]),e._v(" "),t("td",{staticStyle:{"text-align":"left"}},[e._v("A time in hh:mm:ss or hh:mm (default format), like 10:40:16.")])]),e._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[e._v("DateTime")]),e._v(" "),t("td",{staticStyle:{"text-align":"left"}},[e._v("Date and Time types combined into one, like 22/06/2022 10:40:16.")])]),e._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[e._v("Error")]),e._v(" "),t("td",{staticStyle:{"text-align":"left"}},[e._v("An error returned as a result of formula calculation, like #REF!")])]),e._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[e._v("Duration")]),e._v(" "),t("td",{staticStyle:{"text-align":"left"}},[e._v("A time-based amount of time")])]),e._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[e._v("Currency")]),e._v(" "),t("td",{staticStyle:{"text-align":"left"}},[e._v("Number representing currency")])]),e._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[e._v("Percentage")]),e._v(" "),t("td",{staticStyle:{"text-align":"left"}},[e._v("Number representing percentage")])])])]),e._v(" "),t("h2",{attrs:{id:"date-and-time-values"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#date-and-time-values"}},[e._v("#")]),e._v(" Date and time values")]),e._v(" "),t("p",[e._v("For better compatibility with other spreadsheet software, HyperFormula stores\ndate and time values as numbers. This makes it easier to perform mathematical\noperations such as calculating the number of days between two dates.")]),e._v(" "),t("ul",[t("li",[e._v("A Date value is represented as the number of full days since\n"),t("RouterLink",{attrs:{to:"/api/interfaces/configparams.html#nulldate"}},[t("code",[e._v("nullDate")])]),e._v(".")],1),e._v(" "),t("li",[e._v("A Time value is represented as a fraction of a full day.")]),e._v(" "),t("li",[e._v("A DateTime value is represented as the number of (possibly fractional) days\nsince "),t("RouterLink",{attrs:{to:"/api/interfaces/configparams.html#nulldate"}},[t("code",[e._v("nullDate")])]),e._v(".")],1)]),e._v(" "),t("h2",{attrs:{id:"getting-cell-type"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#getting-cell-type"}},[e._v("#")]),e._v(" Getting cell type")]),e._v(" "),t("p",[e._v("Cells have types that can be retrieved by using the "),t("code",[e._v("getCellType")]),e._v(" method. Cell\ncontent is not calculated and the method returns only the type, so, for example,\nyou can check if there is a formula inside a cell. Here is the list of possible\ncell types: "),t("code",[e._v("'FORMULA'")]),e._v(", "),t("code",[e._v("'VALUE'")]),e._v(", "),t("code",[e._v("'ARRAY'")]),e._v(", "),t("code",[e._v("'EMPTY")]),e._v(", "),t("code",[e._v("ARRAYFORMULA")]),e._v(".")]),e._v(" "),t("h2",{attrs:{id:"getting-cell-value-type"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#getting-cell-value-type"}},[e._v("#")]),e._v(" Getting cell value type")]),e._v(" "),t("p",[e._v("You can also use the "),t("code",[e._v("getCellValueType")]),e._v(" method which returns the calculated\nvalue type, so a cell's value for the formula: "),t("code",[e._v("'=SUM(1, 2, 3)'")]),e._v(" will be\n'NUMBER'. Here is the list of possible cell value types: "),t("code",[e._v("'NUMBER'")]),e._v(", "),t("code",[e._v("'STRING'")]),e._v(",\n"),t("code",[e._v("'BOOLEAN'")]),e._v(", "),t("code",[e._v("'ERROR'")]),e._v(", "),t("code",[e._v("'EMPTY'")]),e._v(".")]),e._v(" "),t("h2",{attrs:{id:"getting-detailed-cell-value-type"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#getting-detailed-cell-value-type"}},[e._v("#")]),e._v(" Getting detailed cell value type")]),e._v(" "),t("p",[e._v("Currently, number type contains several subtypes (date, time, datetime,\ncurrency, percentage), that can be used interchangeably with numbers in\ncomputation. We keep track of those, so e.g. if a function produces\ncurrency-type output, and later the value is used in arithmetic operations, the\noutput of those is as well-marked as currency-type. Info about those can be\nextracted via "),t("code",[e._v("getCellValueDetailedType")]),e._v(" function. Auxiliary information about\nformatting (if there is any) is available via "),t("code",[e._v("getCellValueFormat")]),e._v(" function. In\ncase of currency, it would be the currency symbol used when parsing the currency\n(e.g. '$').")])])}),[],!1,null,null,null);t.default=i.exports}}]);