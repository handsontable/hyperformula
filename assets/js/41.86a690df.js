(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{335:function(e,t,n){"use strict";n.r(t);var i=n(14),s=Object(i.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"building"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#building"}},[e._v("#")]),e._v(" Building")]),e._v(" "),t("p",[e._v("The build process uses Webpack and Babel, as well as npm tasks\nlisted in package.json. During this process, the source located in\nthe "),t("code",[e._v("src/*")]),e._v(" directory is transformed into the output files.")]),e._v(" "),t("p",[t("strong",[e._v("For UMD versions which reside in CDN:")])]),e._v(" "),t("ul",[t("li",[t("code",[e._v("./dist/hyperformula.js")]),e._v(" - a full version which does not have\ndependencies, they need to be added manually")]),e._v(" "),t("li",[t("code",[e._v("./dist/hyperformula.min.js")]),e._v(" - a minified version which does not\nhave  dependencies, they need to be added manually")]),e._v(" "),t("li",[t("code",[e._v("./dist/hyperformula.full.js")]),e._v(" - a full version with dependencies")]),e._v(" "),t("li",[t("code",[e._v("./dist/hyperformula.full.min.js")]),e._v(" - a minified version with\ndependencies")])]),e._v(" "),t("p",[e._v("There are also versions of builds in CommonJS, ES6, and TypeScript\ndefinitions. They are marked in the package.json file. Based on\nthe tools used (Webpack, parsers, etc.), a proper build will be\nrespectively chosen.")]),e._v(" "),t("p",[e._v("The library is developed in TypeScript and the exact configuration\noptions can be found in "),t("code",[e._v("tsconfig.json")]),e._v(". To run the commands you need\nto set up your environment to have "),t("code",[e._v("npm")]),e._v(" or "),t("code",[e._v("yarn")]),e._v(" properly installed.\nAfter that, navigate to the project and run "),t("code",[e._v("npm install")]),e._v(".")]),e._v(" "),t("h2",{attrs:{id:"build-the-project"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#build-the-project"}},[e._v("#")]),e._v(" Build the project")]),e._v(" "),t("p",[e._v("To build the project you can use the following commands:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("npm run bundle-all")]),e._v("  - generates development and production\nbuilds, verifies the version")]),e._v(" "),t("li",[t("code",[e._v("npm run bundle:es")]),e._v(" - transpiles files into the "),t("code",[e._v("import/export")]),e._v("\nformat , builds ES6 version")]),e._v(" "),t("li",[t("code",[e._v("npm run bundle:cjs")]),e._v(" - builds CommonJS version")]),e._v(" "),t("li",[t("code",[e._v("npm run bundle:development")]),e._v(" - generates development build")]),e._v(" "),t("li",[t("code",[e._v("npm run bundle:production")]),e._v(" - generates production build")]),e._v(" "),t("li",[t("code",[e._v("npm run bundle:languages")]),e._v(" - builds the languages")]),e._v(" "),t("li",[t("code",[e._v("npm run bundle:typings")]),e._v(" - generates TypeScript typing, only emits ‘.d.ts’ declaration files")])]),e._v(" "),t("p",[e._v("We use the latest version of Node 16 LTS in the build-chain and recommend this version for building. Note that for using (not building) HyperFormula, a wider range of Node versions is supported.")]),e._v(" "),t("h2",{attrs:{id:"verify-the-build"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#verify-the-build"}},[e._v("#")]),e._v(" Verify the build")]),e._v(" "),t("p",[e._v("By using the following commands you can verify the build:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("verify-bundles")]),e._v(" - runs all verify commands")]),e._v(" "),t("li",[t("code",[e._v("verify:umd")]),e._v(" - verifies UMD version")]),e._v(" "),t("li",[t("code",[e._v("verify:umd:min")]),e._v(" - verifies UMD minified version without dependencies")]),e._v(" "),t("li",[t("code",[e._v("verify:umd:full")]),e._v(" - verifies UMD version with dependencies")]),e._v(" "),t("li",[t("code",[e._v("verify:umd:full.min")]),e._v(" - verifies minified UMD version with dependencies")]),e._v(" "),t("li",[t("code",[e._v("verify:cjs")]),e._v(" - verifies CommonJS version with dependencies")]),e._v(" "),t("li",[t("code",[e._v("verify:publish-package")]),e._v(" -  checks if npm built the package correctly")]),e._v(" "),t("li",[t("code",[e._v("verify:typings")]),e._v(" - verifies TypeScript typings")])]),e._v(" "),t("h2",{attrs:{id:"build-the-documentation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#build-the-documentation"}},[e._v("#")]),e._v(" Build the documentation")]),e._v(" "),t("p",[e._v("Most likely, you will want to document the code. You can use the following commands to generate the documentation:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("npm run docs:build")]),e._v(" - builds the docs")]),e._v(" "),t("li",[t("code",[e._v("npm run docs:dev")]),e._v(" - serves the development version of the docs locally")])]),e._v(" "),t("h2",{attrs:{id:"run-the-tests"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#run-the-tests"}},[e._v("#")]),e._v(" Run the tests")]),e._v(" "),t("p",[e._v("The tests are done with Jest and Karma. The same test suite should\npass in both of them because the library might be used\n"),t("a",{attrs:{href:"server-side-installation"}},[e._v("server-side")]),e._v(" or in a browser, so you have\nto be sure that both environments are fine.")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("npm run test")]),e._v(" - runs the linter and all tests")]),e._v(" "),t("li",[t("code",[e._v("npm run test:unit")]),e._v(" - runs unit tests\n"),t("ul",[t("li",[e._v("To run a test suite that matches a word, add a Jest "),t("code",[e._v("-t")]),e._v(" flag. For example: "),t("code",[e._v("npm run test:unit -- -t 'SUMIF'")]),e._v(" runs only the tests that match the word "),t("code",[e._v("SUMIF")]),e._v(" within "),t("code",[e._v("describe()")]),e._v(" or "),t("code",[e._v("it()")]),e._v(".")]),e._v(" "),t("li",[e._v("To run a specific test suite, pass the file name. For example: "),t("code",[e._v("npm run test:unit 'function-sumif.spec.ts'")]),e._v(" runs only the unit tests from the file "),t("code",[e._v("function-sumif.spec.ts")]),e._v(".")])])]),e._v(" "),t("li",[t("code",[e._v("npm run test:coverage")]),e._v(" - runs unit tests and generates code coverage")]),e._v(" "),t("li",[t("code",[e._v("npm run test:browser")]),e._v(" - runs tests in "),t("strong",[e._v("karma")]),e._v(" once and closes all open browsers\n"),t("ul",[t("li",[e._v("To run a specific "),t("code",[e._v("spec")]),e._v(" file or a test suite you can add a Karma "),t("code",[e._v("--spec")]),e._v(" flag. For example: "),t("code",[e._v("npm run test:browser.debug -- --spec=matrix.spec.ts")]),e._v(" runs "),t("code",[e._v("matrix.spec.ts")]),e._v(" browser tests only")])])]),e._v(" "),t("li",[t("code",[e._v("npm run test:browser.debug")]),e._v(" - runs test in "),t("strong",[e._v("karma")]),e._v(" only in Chrome until you exit the process. It watches changes in "),t("code",[e._v("src")]),e._v(" and "),t("code",[e._v("test")]),e._v(" directories and rebuilds them automatically.")])]),e._v(" "),t("h2",{attrs:{id:"run-the-linter"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#run-the-linter"}},[e._v("#")]),e._v(" Run the linter")]),e._v(" "),t("p",[e._v("You can use the following commands to lint the code, so it meets the required standards. ESLint is used as the tool of choice in this case.")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("npm run lint")]),e._v(" - lints the code")]),e._v(" "),t("li",[t("code",[e._v("npm run lint:fix")]),e._v(" - automatically fixes lint problems")])])])}),[],!1,null,null,null);t.default=s.exports}}]);